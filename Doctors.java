/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.hms;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pmshireen
 */
public class Doctors extends javax.swing.JFrame {

    /**
     * Creates new form Doctors
     */
    
// Database connection information static variable declaration
private static final String USERNAME = "root";
private static final String PWD = "mmm";
private static final String CONSTR = "jdbc:mysql://localhost:3306/hms";

private JFrame jFrame1;

// Connection, Prepared Statement and resultset Objects declaration
Connection dbcon = null;
PreparedStatement ps = null;
ResultSet rs = null;

// Int variable declaration
int columnCount;        // To get the column count from the Jtable
int i;                  // For loop initialization variable
int selectedDoctorID;  // Variable to get the selected record ID from the Jtable
int deleteItem;         // To get the record ID of the record to be deleted

     
    public Doctors() {
        initComponents();
    try {
        listDoctors();
    } catch (SQLException ex) {
        Logger.getLogger(Doctors.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnMainMenu = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDoctors = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtDoctorGender = new javax.swing.JTextField();
        txtDoctorID = new javax.swing.JTextField();
        txtDoctorName = new javax.swing.JTextField();
        txtDoctorMobileNo = new javax.swing.JTextField();
        txtDoctorAge = new javax.swing.JTextField();
        txtDoctorDegree = new javax.swing.JTextField();
        txtDoctorState = new javax.swing.JTextField();
        txtDoctorCity = new javax.swing.JTextField();
        txtDoctorAddress = new javax.swing.JTextField();
        txtDoctorPincode = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnAddDoctor = new javax.swing.JButton();
        btnModifyDoctor = new javax.swing.JButton();
        BtnDeleteDoctor = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("JFrame1"); // NOI18N
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Hospital Management System");

        btnMainMenu.setText("Go to Main Menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(367, 367, 367)
                .addComponent(jLabel1)
                .addGap(114, 114, 114)
                .addComponent(btnMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnMainMenu)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 30));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jTableDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor ID", "Doctor Name", "Mobile No", "Gender", "Age", "Degree", "Address", "City", "Pincode", "State"
            }
        ));
        jTableDoctors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDoctorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableDoctors);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1020, 260));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Doctor ID:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Doctor Name:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Doctor Mobile No:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Doctor Gender:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Doctor Age:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Doctor Degree:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Doctor Address:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Doctor City:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Doctor Pincode:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Doctor State:");

        txtDoctorID.setEditable(false);

        txtDoctorDegree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorDegreeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDoctorName, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                            .addComponent(txtDoctorID)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDoctorAge, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                            .addComponent(txtDoctorGender)
                            .addComponent(txtDoctorMobileNo))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12)
                    .addComponent(jLabel8))
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDoctorAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDoctorDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtDoctorState, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addComponent(txtDoctorPincode, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDoctorCity, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(54, 54, 54))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDoctorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDoctorDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtDoctorAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDoctorMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDoctorCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(txtDoctorPincode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12))
                            .addComponent(txtDoctorState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txtDoctorGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDoctorAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel10))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 800, 220));

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        btnAddDoctor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddDoctor.setText("Add Doctor");
        btnAddDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDoctorActionPerformed(evt);
            }
        });

        btnModifyDoctor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnModifyDoctor.setText("Modify Doctor");
        btnModifyDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyDoctorActionPerformed(evt);
            }
        });

        BtnDeleteDoctor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BtnDeleteDoctor.setText("Delete Doctor");
        BtnDeleteDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteDoctorActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModifyDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 45, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnExit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BtnDeleteDoctor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddDoctor)
                .addGap(11, 11, 11)
                .addComponent(btnModifyDoctor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BtnDeleteDoctor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClear)
                .addGap(18, 18, 18)
                .addComponent(btnExit)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 310, 220, 220));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Doctors Information");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        setSize(new java.awt.Dimension(1045, 593));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // ************************
    public void listDoctors() throws SQLException{
        
        // Connect to the MYSQL Database
        try {Class.forName("com.mysql.cj.jdbc.Driver");
        dbcon = DriverManager.getConnection(CONSTR,USERNAME,PWD);
        
        // Declare the SQL Query
        String sqlQuery = "SELECT DOCTOR_ID, DOCTOR_NAME, DOCTOR_MOBILE_NO, DOCTOR_GENDER, DOCTOR_AGE, DOCTOR_DEGREE, DOCTOR_ADDRESS, DOCTOR_CITY, DOCTOR_PINCODE, DOCTOR_STATE FROM HMS.doctors";
        
        // Prepare the statement for the query
        ps = dbcon.prepareStatement(sqlQuery);
        
        // Run the query and get the result from database
        rs = ps.executeQuery();  
        
        // Print whether Database gets connected
        System.out.println("Database Connected for listing Doctors...");
        
        // To populate the result set collected from the database into JTable
        ResultSetMetaData stData = rs.getMetaData();
        columnCount = stData.getColumnCount();
        DefaultTableModel tblDoctors = (DefaultTableModel) jTableDoctors.getModel();
        tblDoctors.setRowCount(0);
         
        while (rs.next()){
            Vector columnData = new Vector();
                for (i=1;  i<=columnCount; i++)
                    {
                    columnData.add(rs.getInt("DOCTOR_ID" ));
                    columnData.add(rs.getString("DOCTOR_NAME"));
                    columnData.add(rs.getString("DOCTOR_MOBILE_NO"));
                    columnData.add(rs.getString("DOCTOR_GENDER"));
                    columnData.add(rs.getString("DOCTOR_AGE"));
                    columnData.add(rs.getString("DOCTOR_DEGREE"));
                    columnData.add(rs.getString("DOCTOR_ADDRESS"));
                    columnData.add(rs.getString("DOCTOR_CITY"));
                    columnData.add(rs.getString("DOCTOR_PINCODE"));
                    columnData.add(rs.getString("DOCTOR_STATE"));
                    }
                   tblDoctors.addRow(columnData);
    }        
        }
    
        // catch(ClassNotFoundException | SQLException e){ System.out.println(e);}
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }
    
       
    private void btnModifyDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyDoctorActionPerformed
        // Code for modifying a selected doctor 
        // When we select a record from the Jtable, populate the column value on the text controls
        // Define the model for JTable for columns
        DefaultTableModel tblDoctor = (DefaultTableModel) jTableDoctors.getModel();
        int selectedRows = jTableDoctors.getSelectedRow();
            
        try {
        
        // Get the selected Doctor ID from the selected row from JTable
        // This ID is used to modify the record in the database
        selectedDoctorID = Integer.parseInt(tblDoctor.getValueAt(selectedRows, 0).toString());
        
        // Connect to the database
        Class.forName("com.mysql.cj.jdbc.Driver");
        dbcon = DriverManager.getConnection(CONSTR,USERNAME,PWD);
        
        // Define the database update query 
        String sqlQuery = "update Doctors set DOCTOR_NAME =?, DOCTOR_MOBILE_NO=?, DOCTOR_GENDER=?, DOCTOR_AGE=?, DOCTOR_DEGREE=?, DOCTOR_ADDRESS=?, DOCTOR_CITY=?, DOCTOR_PINCODE=?, DOCTOR_STATE=? where DOCTOR_ID = ?";
        
        // Get the object for Prepared Statement for the above query
        ps = dbcon.prepareStatement(sqlQuery);
        
        // Print whether database connected
        System.out.println("Database Connected for modifying the selected Doctor...");
        
        // set the modified values from the text fields into the prepared statment object
        ps.setString(1, txtDoctorName.getText());
        ps.setString(2, txtDoctorMobileNo.getText());
        ps.setString(3, txtDoctorGender.getText());
        ps.setString(4, txtDoctorAge.getText());
        ps.setString(5, txtDoctorDegree.getText());
        ps.setString(6, txtDoctorAddress.getText());
        ps.setString(7, txtDoctorCity.getText());
        ps.setString(8, txtDoctorPincode.getText());
        ps.setString(9, txtDoctorState.getText());
        ps.setInt(10, selectedDoctorID);
     
        // Print the selected Doctor ID
        System.out.println ("The Value of Doctor ID is ");
        System.out.println (selectedDoctorID);
        
        // Execute the preparedstatement update query
        ps.executeUpdate();
        System.out.println("Modify Completed...");
        
        // Show a message for modification completed
        JOptionPane.showMessageDialog(this, "Doctor modified successfully.");

        // To load the doctors list in the table after every modify doctor..
        listDoctors();
        
        // To clear all the textfields after modifying the selected record
        txtDoctorName.setText("");
        txtDoctorMobileNo.setText("");
        txtDoctorGender.setText("");
        txtDoctorAge.setText("");
        txtDoctorDegree.setText("");
        txtDoctorAddress.setText("");
        txtDoctorCity.setText("");
        txtDoctorPincode.setText("");
        txtDoctorState.setText("");
        txtDoctorID.setText("");
        
        // To the set cursor focus on the Doctor Name after MODIFY a record
        txtDoctorName.requestFocus();
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
            ex.printStackTrace();
        } 
        
    }//GEN-LAST:event_btnModifyDoctorActionPerformed

    private void BtnDeleteDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteDoctorActionPerformed
        
        // Code for deleting a selected doctor 
        // When we select a record from the Jtable, populate the column value on the text controls
        // Define the model for JTable for columns
        
        DefaultTableModel tblDoctor = (DefaultTableModel) jTableDoctors.getModel();
        int selectedRows = jTableDoctors.getSelectedRow();
        
        try {
        
        // get the selected Doctor ID from the Jtable model object
        selectedDoctorID = Integer.parseInt(tblDoctor.getValueAt(selectedRows, 0).toString());
        
        // Define the confirmation message dialog box and get the YES or NO option
        deleteItem = JOptionPane.showConfirmDialog(null, "Do you want to delete this record", "Warning", JOptionPane.YES_NO_OPTION);
        
        if (deleteItem == JOptionPane.YES_OPTION)  
        {
        
        // Get the database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        dbcon = DriverManager.getConnection(CONSTR,USERNAME,PWD);
        
        // Define the delete query
        String sqlQuery = "delete from Doctors where DOCTOR_ID = ?";
                    
        // Create prepared statement object for delete query
        ps = dbcon.prepareStatement(sqlQuery);
                
        // Print whether database connected for deleting the selected record
        System.out.println("Database connected for deleting the Doctor...");
        
        // Set the prepared statement object values for deletion
        ps.setInt(1, selectedDoctorID);

        // Print the selected Doctor ID 
        System.out.println ("The Value of Doctor ID is ");
        System.out.println (selectedDoctorID);
        
        // Execute the prepared statement object
        ps.executeUpdate();
        
        // To clear all the textfields after deleting the selected record
        txtDoctorName.setText("");
        txtDoctorMobileNo.setText("");
        txtDoctorGender.setText("");
        txtDoctorAge.setText("");
        txtDoctorDegree.setText("");
        txtDoctorAddress.setText("");
        txtDoctorCity.setText("");
        txtDoctorPincode.setText("");
        txtDoctorState.setText("");
        txtDoctorID.setText("");
        
        // To the set cursor focus on the Doctor Name after delete a record
        txtDoctorName.requestFocus();
        
        // Print once delete completed
        System.out.println("Delete Completed...");
        
        // To show an information message to the user that record has been deleted.
        JOptionPane.showMessageDialog(this, "Doctor deleted successfully.");

        // To load the doctors list in the table after every delete
        listDoctors();
}
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
            ex.printStackTrace();
        }  
    }//GEN-LAST:event_BtnDeleteDoctorActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        
         // To clear all the textfields after inserting the data
        txtDoctorName.setText("");
        txtDoctorMobileNo.setText("");
        txtDoctorGender.setText("");
        txtDoctorAge.setText("");
        txtDoctorDegree.setText("");
        txtDoctorAddress.setText("");
        txtDoctorCity.setText("");
        txtDoctorPincode.setText("");
        txtDoctorState.setText("");
        txtDoctorID.setText("");
        
        // To the set cursor focus on the Doctor Name after delete a record
        txtDoctorName.requestFocus();
        
        // To unselect the selected record in the Jtable 
        jTableDoctors.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
          // Code for Exit button click to show alert message 
        jFrame1 = new JFrame("Exit");
        if (JOptionPane.showConfirmDialog(jFrame1, "Do you want to exit?", "Doctor Information",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
        {
            System.exit(0);
        }
        
    }//GEN-LAST:event_btnExitActionPerformed

    private void jTableDoctorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDoctorsMouseClicked
         // When we select a record from the Jtable, populate the column value on the text controls
        // Define the model for JTable
        DefaultTableModel tblDoctors = (DefaultTableModel) jTableDoctors.getModel();
        int selectedRows = jTableDoctors.getSelectedRow();
        
        // Selected row column values are populated on the text fields
        txtDoctorID.setText(tblDoctors.getValueAt(selectedRows, 0).toString());
        txtDoctorName.setText(tblDoctors.getValueAt(selectedRows, 1).toString());
        txtDoctorMobileNo.setText(tblDoctors.getValueAt(selectedRows, 2).toString());
        txtDoctorGender.setText(tblDoctors.getValueAt(selectedRows, 3).toString());
        txtDoctorAge.setText(tblDoctors.getValueAt(selectedRows, 4).toString());
        txtDoctorDegree.setText(tblDoctors.getValueAt(selectedRows, 5).toString());
        txtDoctorAddress.setText(tblDoctors.getValueAt(selectedRows, 6).toString());
        txtDoctorCity.setText(tblDoctors.getValueAt(selectedRows, 7).toString());
        txtDoctorPincode.setText(tblDoctors.getValueAt(selectedRows, 8).toString());
        txtDoctorState.setText(tblDoctors.getValueAt(selectedRows, 9).toString());
        
    }//GEN-LAST:event_jTableDoctorsMouseClicked

    private void btnAddDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDoctorActionPerformed
        
        // Code to add new Doctor
    
        try {
        
        // To define the jdbc connection class
        Class.forName("com.mysql.cj.jdbc.Driver");
        
        // Get connection from datbase
        dbcon = DriverManager.getConnection(CONSTR,USERNAME,PWD);
        
        // Declare the insert script query from text fields.
        String sqlQuery = "insert into hms.doctors (DOCTOR_NAME, DOCTOR_MOBILE_NO, DOCTOR_GENDER, DOCTOR_AGE, DOCTOR_DEGREE, DOCTOR_ADDRESS, DOCTOR_CITY, DOCTOR_PINCODE, DOCTOR_STATE) value (?,?,?,?,?,?,?,?,?)";
        
        // Prepare the prepare statement for the above query
        ps = dbcon.prepareStatement(sqlQuery);
        
        // Print whether Database gets connected
        System.out.println("DB Connected for Adding Doctor...");
        
        // Collect the text values from the controls and assign it into Prepare statement 
        ps.setString(1, txtDoctorName.getText());
        ps.setString(2, txtDoctorMobileNo.getText());
        ps.setString(3, txtDoctorGender.getText());
        ps.setString(4, txtDoctorAge.getText());
        ps.setString(5, txtDoctorDegree.getText());
        ps.setString(6, txtDoctorAddress.getText());
        ps.setString(7, txtDoctorCity.getText());
        ps.setString(8, txtDoctorPincode.getText());
        ps.setString(9, txtDoctorState.getText());
        
        // Execute the Prepared Statement
        ps.executeUpdate();
        
        // Print whether insert into database completed
        System.out.println("INSERT Completed...");
        
        // Print a message after insert completed
        JOptionPane.showMessageDialog(this, "Doctor added successfully.");
        
        // To clear all the textfields after inserting the data
        txtDoctorName.setText("");
        txtDoctorMobileNo.setText("");
        txtDoctorGender.setText("");
        txtDoctorAge.setText("");
        txtDoctorDegree.setText("");
        txtDoctorAddress.setText("");
        txtDoctorCity.setText("");
        txtDoctorPincode.setText("");
        txtDoctorState.setText("");
        txtDoctorID.setText("");
        
        // To the set cursor focus on the Doctor Name after delete a record
        txtDoctorName.requestFocus();

        // To load the doctors list in the table after every new add...
        listDoctors();

        }
        catch (HeadlessException | ClassNotFoundException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex);
     
    } 
    }//GEN-LAST:event_btnAddDoctorActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        
        // To show the main menu window
        MenuScreen m = new MenuScreen();
        m.setVisible(true);
        
        dispose(); // To close Doctors window
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void txtDoctorDegreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorDegreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorDegreeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Doctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Doctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Doctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Doctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Doctors().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDeleteDoctor;
    private javax.swing.JButton btnAddDoctor;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnModifyDoctor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDoctors;
    private javax.swing.JTextField txtDoctorAddress;
    private javax.swing.JTextField txtDoctorAge;
    private javax.swing.JTextField txtDoctorCity;
    private javax.swing.JTextField txtDoctorDegree;
    private javax.swing.JTextField txtDoctorGender;
    private javax.swing.JTextField txtDoctorID;
    private javax.swing.JTextField txtDoctorMobileNo;
    private javax.swing.JTextField txtDoctorName;
    private javax.swing.JTextField txtDoctorPincode;
    private javax.swing.JTextField txtDoctorState;
    // End of variables declaration//GEN-END:variables
}
