package com.mycompany.hms;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import java.awt.HeadlessException;
import java.sql.*;
import java.text.*;
import javax.swing.*;
import java.util.*;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;

/**
 *
 * @author pmmurshidha
 */
public class Services extends javax.swing.JFrame {

    /**
     * Creates new form Services
     */
    private static final String USERNAME = "root";
    private static final String PWD = "Murshidha";
    private static final String CONSTR = "jdbc:mysql://localhost:3306/hms";
    private JFrame jFrame;
    Connection dbcon = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    
    int columnCount;            // To take column count in the table listing
    int i;                      // To initialize for loop
    int selectedServiceID;      // To get selected record ID from the table
    int deleteItem;             // To get the selected record ID for delete
    

    public Services() throws SQLException, ClassNotFoundException {
        
        initComponents();
        loadPatientsCombo();
        loadDcotorsCombo();
        listServices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void listServices() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            dbcon = DriverManager.getConnection(CONSTR, USERNAME, PWD);
            String sqlQuery = "select SERVICE_ID, SERVICE_DATE, PATIENT_NAME, PATIENT_WEIGHT, PATIENT_PRESSURE, PATIENT_PROBLEM, DOCTOR_PRESCRIPTION, DOCTOR_NAME FROM hms.services";
            ps = dbcon.prepareStatement(sqlQuery);
            rs = ps.executeQuery();
            System.out.println("DB Connected for listing services...");
            ResultSetMetaData stData = rs.getMetaData();
            columnCount = stData.getColumnCount();
            DefaultTableModel tableServices = (DefaultTableModel) jTableService.getModel();
            tableServices.setRowCount(0);

            while (rs.next()) {
                Vector columnData = new Vector();
                for (i = 1; i <= columnCount; i++) {
                    columnData.add(rs.getInt("SERVICE_ID"));
                    columnData.add(rs.getString("SERVICE_DATE"));
                    columnData.add(rs.getString("PATIENT_NAME"));
                    columnData.add(rs.getString("PATIENT_WEIGHT"));
                    columnData.add(rs.getString("PATIENT_PRESSURE"));
                    columnData.add(rs.getString("PATIENT_PROBLEM"));
                    columnData.add(rs.getString("DOCTOR_PRESCRIPTION"));
                    columnData.add(rs.getString("DOCTOR_NAME"));
                    

                }
                tableServices.addRow(columnData);

            }
        } // catch(ClassNotFoundException | SQLException e){ System.out.println(e);}
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    // My Code for patient listing - Start (pmmurshidha)
    public void loadPatientsCombo() throws SQLException, ClassNotFoundException {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            dbcon = DriverManager.getConnection(CONSTR, USERNAME, PWD);
           
            String sqlQuery = "select PATIENT_NAME FROM hms.patients";
            ps = dbcon.prepareStatement(sqlQuery);
            rs = ps.executeQuery();
            System.out.println("DB Connected for loading Patients Combo...");
            
            // To set the current date on the date picker
            Date date = new Date();
            dateServiceDate.setDate(date);

            while (rs.next()) {
                comboPatients.addItem(rs.getString("PATIENT_NAME"));
            }
        } //catch(ClassNotFoundException | SQLException e){ System.out.println(e);}
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    public void loadDcotorsCombo() throws SQLException, ClassNotFoundException {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            dbcon = DriverManager.getConnection(CONSTR, USERNAME, PWD);
            
            String sqlQuery = "select DOCTOR_NAME FROM hms.doctors";
            ps = dbcon.prepareStatement(sqlQuery);
            rs = ps.executeQuery();
            System.out.println("DB Connected for loading doctors combo...");

            while (rs.next()) {
                comboDoctors.addItem(rs.getString("DOCTOR_NAME"));
            }
        } //catch(ClassNotFoundException | SQLException e){ System.out.println(e);}
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableService = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtPatientProblem = new javax.swing.JTextField();
        txtServiceID = new javax.swing.JTextField();
        txtPatientWeight = new javax.swing.JTextField();
        txtPatientPressure = new javax.swing.JTextField();
        comboDoctors = new javax.swing.JComboBox<>();
        comboPatients = new javax.swing.JComboBox<>();
        lblPrescription = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPrescription = new javax.swing.JTextArea();
        dateServiceDate = new com.toedter.calendar.JDateChooser();
        jPanel4 = new javax.swing.JPanel();
        btnAddService = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnModifyService = new javax.swing.JButton();
        btnDeleteService = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnMainMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1120, 480));
        setPreferredSize(new java.awt.Dimension(1000, 590));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 6));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Service ID", "Service Date", "Patient Name", "Patient Weight", "Patient Pressure", "Patient Problem", "Prescription", "Doctor Name"
            }
        ));
        jTableService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableServiceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableService);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1070, 200));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1090, 220));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 6));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Patient Problem:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 130, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Service ID:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 130, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Service Date:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 130, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Patient Name:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 130, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Patient Weight:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 130, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Patient Pressure:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 130, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Doctor Name:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, 110, -1));
        jPanel3.add(txtPatientProblem, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 230, -1));

        txtServiceID.setEditable(false);
        jPanel3.add(txtServiceID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 230, -1));
        jPanel3.add(txtPatientWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 230, -1));
        jPanel3.add(txtPatientPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 230, -1));

        comboDoctors.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jPanel3.add(comboDoctors, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, 250, -1));

        comboPatients.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jPanel3.add(comboPatients, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 220, -1));

        lblPrescription.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPrescription.setText("Prescription:");
        jPanel3.add(lblPrescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, -1, -1));

        txtPrescription.setColumns(20);
        txtPrescription.setRows(5);
        jScrollPane2.setViewportView(txtPrescription);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, 390, 130));
        jPanel3.add(dateServiceDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 230, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 880, 250));

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 6));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAddService.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddService.setText("Add Service");
        btnAddService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServiceActionPerformed(evt);
            }
        });
        jPanel4.add(btnAddService, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 140, -1));

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel4.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 140, -1));

        btnModifyService.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnModifyService.setText("Modify Service");
        btnModifyService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyServiceActionPerformed(evt);
            }
        });
        jPanel4.add(btnModifyService, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 140, -1));

        btnDeleteService.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDeleteService.setText("Delete Service");
        btnDeleteService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteServiceActionPerformed(evt);
            }
        });
        jPanel4.add(btnDeleteService, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 140, -1));

        btnClear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel4.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 140, -1));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 280, 210, 250));

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 6));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Service Information");
        jPanel5.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 20));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 1090, 40));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Hospital Management System");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 0, -1, 20));

        btnMainMenu.setText("Go to Main Menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });
        getContentPane().add(btnMainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 0, 170, -1));

        setSize(new java.awt.Dimension(1120, 582));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddServiceActionPerformed
        // TODO add your handling code here:
        // My Code for adding service  - Start (pmmurshidha)
        try {

            // To define the jdbc connection class
            Class.forName("com.mysql.cj.jdbc.Driver");

            // To get connection from datbase
            dbcon = DriverManager.getConnection(CONSTR, USERNAME, PWD);

            // To prepare the insert into database query from text fields.
            String sqlQuery = "insert into hms.services (SERVICE_DATE, PATIENT_NAME,PATIENT_WEIGHT, PATIENT_PRESSURE,PATIENT_PROBLEM,DOCTOR_PRESCRIPTION,DOCTOR_NAME) value (?,?,?,?,?,?,?)";
            ps = dbcon.prepareStatement(sqlQuery);
            System.out.println("DB Connected for Adding services...");

            // To convert the date picker date format as we want
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            //SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            String serviceDate = sdf.format(dateServiceDate.getDate());
            System.out.println(serviceDate);

            ps.setString(1, serviceDate);
            ps.setString(2, comboPatients.getSelectedItem().toString());
            ps.setString(3, txtPatientWeight.getText());
            ps.setString(4, txtPatientPressure.getText());
            ps.setString(5, txtPatientProblem.getText());
            ps.setString(6, txtPrescription.getText());
            ps.setString(7, comboDoctors.getSelectedItem().toString());

            ps.executeUpdate();
            System.out.println("service added...");

            JOptionPane.showMessageDialog(this, "Service added successfully.");

            // To clear all the textfields after deleting the selected recorde 
            //dateServiceDate.setDate("");
            txtServiceID.setText("");
            comboPatients.setSelectedIndex(0);
            txtPatientWeight.setText("");
            txtPatientPressure.setText("");
            txtPatientProblem.setText("");
            comboDoctors.setSelectedIndex(0);
            txtPrescription.setText("");

            // To the set cursor focus on the Patient Name after delete a record
            dateServiceDate.requestFocus();

            // To load the list in the table after every new add...
            listServices();

        } catch (HeadlessException | ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);

        }


    }//GEN-LAST:event_btnAddServiceActionPerformed

    private void jTableServiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableServiceMouseClicked
        // TODO add your handling code here:
        
        try {
            DefaultTableModel tableServices = (DefaultTableModel) jTableService.getModel();
            int selectedRows = jTableService.getSelectedRow();

            txtServiceID.setText(tableServices.getValueAt(selectedRows, 0).toString());
        
            // To convert the date from the table as string
            String strDate = (tableServices.getValueAt(selectedRows, 1).toString());
        
            // To convert the date in string format into date format
            Date date;
            //date = new SimpleDateFormat("yyyy-MM-dd").parse((String) tableServices.getValueAt(selectedRows, 1));
            date = new SimpleDateFormat("yyyy-MM-dd").parse(strDate);
            dateServiceDate.setDate(date);
      
            comboPatients.setSelectedItem(tableServices.getValueAt(selectedRows, 2).toString());
            txtPatientWeight.setText(tableServices.getValueAt(selectedRows, 3).toString());
            txtPatientPressure.setText(tableServices.getValueAt(selectedRows, 4).toString());
            txtPatientProblem.setText(tableServices.getValueAt(selectedRows, 5).toString());
            txtPrescription.setText(tableServices.getValueAt(selectedRows, 6).toString());
            comboDoctors.setSelectedItem(tableServices.getValueAt(selectedRows, 7).toString());
            
            } catch (ParseException ex) {
                Logger.getLogger(Services.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jTableServiceMouseClicked

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
          jFrame = new JFrame("Exit");
        if (JOptionPane.showConfirmDialog(jFrame, "Are you sure do you want to exit?", "Service Information",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnModifyServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyServiceActionPerformed
        // TODO add your handling code here:
        
         DefaultTableModel tblPatient = (DefaultTableModel) jTableService.getModel();
        int selectedRows = jTableService.getSelectedRow();
            
        try {
        selectedServiceID = Integer.parseInt(tblPatient.getValueAt(selectedRows, 0).toString());
        Class.forName("com.mysql.cj.jdbc.Driver");
        dbcon = DriverManager.getConnection(CONSTR,USERNAME,PWD);
        
        String sqlQuery = "update services set SERVICE_DATE =?, PATIENT_NAME=?, PATIENT_WEIGHT=?, PATIENT_PRESSURE=?,PATIENT_PROBLEM=?,DOCTOR_PRESCRIPTION=?,DOCTOR_NAME=? where SERVICE_ID = ?";
        
               
        ps = dbcon.prepareStatement(sqlQuery);
        System.out.println("DB Connected for Adding Patient...");
        
        
        
        
        // To convert the 'date picker date format' as we want
        
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String serviceDate = sdf.format(dateServiceDate.getDate());
            System.out.println(serviceDate);

        // To get the values from the controls and form the database update query
            ps.setString(1, serviceDate);
            ps.setString(2, comboPatients.getSelectedItem().toString());
            ps.setString(3, txtPatientWeight.getText());
            ps.setString(4, txtPatientPressure.getText());
            ps.setString(5, txtPatientProblem.getText());
            ps.setString(6, txtPrescription.getText());
            ps.setString(7, comboDoctors.getSelectedItem().toString()); 
            
            // Selected record ID is passed to update query
            ps.setInt(8, selectedServiceID);
     
        
        System.out.println ("The Value of Service ID is ");
        System.out.println (selectedServiceID);
      
        // Update the database update query
        ps.executeUpdate();
        System.out.println("Modify Completed...");
        
        JOptionPane.showMessageDialog(this, "Service modified successfully.");

        // To load the services list in the table after every new add...
        listServices();
        
          // To clear all the textfields after modifying the selected record
        
        txtServiceID.setText("");
        //dateServiceDate.setDate("");
        comboPatients.setSelectedIndex(0);
        txtPatientWeight.setText("");
        txtPatientPressure.setText("");
        txtPatientProblem.setText("");
        comboDoctors.setSelectedIndex(0);
        txtPrescription.setText("");
        
        // To the set cursor focus on the Patient Name after MODIFY a record
        dateServiceDate.requestFocus();

        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
            ex.printStackTrace();
           
    } 
        
        
    }//GEN-LAST:event_btnModifyServiceActionPerformed

    private void btnDeleteServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteServiceActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel tableServices = (DefaultTableModel) jTableService.getModel();
        int selectedRows = jTableService.getSelectedRow();
        
        try {
        selectedServiceID = Integer.parseInt(tableServices.getValueAt(selectedRows, 0).toString());
        
        deleteItem = JOptionPane.showConfirmDialog(null, "Do you want to delete this record", "Warning", JOptionPane.YES_NO_OPTION);
        if (deleteItem == JOptionPane.YES_OPTION)  
        {
        Class.forName("com.mysql.cj.jdbc.Driver");
        dbcon = DriverManager.getConnection(CONSTR,USERNAME,PWD);
        
        String sqlQuery = "delete from Services where SERVICE_ID = ?";
        ps = dbcon.prepareStatement(sqlQuery);
                
        System.out.println("DB Connected for deleting the Patient...");
        
        ps.setInt(1, selectedServiceID);
                       
        System.out.println ("The Value of Patient ID is ");
        System.out.println (selectedServiceID);
        
        ps.executeUpdate();
        
        // To clear all the textfields after deleting the selected record
        
        txtServiceID.setText("");
        //dateServiceDate.setDate("");
        comboPatients.setSelectedIndex(0);
        txtPatientWeight.setText("");
        txtPatientPressure.setText("");
        txtPatientProblem.setText("");
        comboDoctors.setSelectedIndex(0);
        txtPrescription.setText("");

        // To the set cursor focus on the Service date after delete a record
        dateServiceDate.requestFocus();

        
        System.out.println("Delete Completed...");
        
        // To show an information message to the user that record has been deleted.
        JOptionPane.showMessageDialog(this, "Service deleted successfully.");

        // To load the services list in the table after every delete
        listServices();
        }
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
            ex.printStackTrace();
           
        }  
    }//GEN-LAST:event_btnDeleteServiceActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        // To clear all the textfields after deleting the selected record
        
        txtServiceID.setText("");
        //dateServiceDate.setDate("");
        comboPatients.setSelectedIndex(0);
        txtPatientWeight.setText("");
        txtPatientPressure.setText("");
        txtPatientProblem.setText("");
        comboDoctors.setSelectedIndex(0);
        txtPrescription.setText("");

        // To the set cursor focus on the Service date after delete a record
        dateServiceDate.requestFocus();
        
        // To unselect the selected record during clear
        jTableService.clearSelection();
        
              
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        // To show the main menu window
        MenuScreen m = new MenuScreen();
        m.setVisible(true);
                
        dispose(); // To close Services window
    }//GEN-LAST:event_btnMainMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Services().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Services.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Services.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddService;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDeleteService;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnModifyService;
    private javax.swing.JComboBox<String> comboDoctors;
    private javax.swing.JComboBox<String> comboPatients;
    private com.toedter.calendar.JDateChooser dateServiceDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableService;
    private javax.swing.JLabel lblPrescription;
    private javax.swing.JTextField txtPatientPressure;
    private javax.swing.JTextField txtPatientProblem;
    private javax.swing.JTextField txtPatientWeight;
    private javax.swing.JTextArea txtPrescription;
    private javax.swing.JTextField txtServiceID;
    // End of variables declaration//GEN-END:variables
}
